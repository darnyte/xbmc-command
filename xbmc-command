#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# simple XBMC command client.
#
# Copyright (C) 2013 Christoph GÃ¶ttschkes
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

try:
  import ConfigParser as configparser
except ImportError:
  import configparser

import importlib
import inspect
import os
import socket
import sys

import xbmc_command

__prog__ = xbmc_command.core.prog
__version__ = xbmc_command.core.version

__help__ = """
usage: %s [--host <host>] [--port <port>] [--timeout <sec>]
                    [--help] [--version] <command> [args]

Connects to the XBMC Mediacenter at <host>:<port> via TCP
and executes the specified command.

If --host, --port or --timeout is not present and a config file
is present in ~/.config/xbmc-command.cfg, the values specified
in this file will be used.

Optional arguments:
  --host <host>     connect to server at host <host>
  --port <port>     connect to server at port <port>
  --timeout <sec>   wait <sec> till timeout, default 5
  --help            show this help message and exit
  --version         output version information and exit

Available commands are:
%%s
See '%s <command> --help' for more information
on a specific command.
""".lstrip() % (__prog__, __prog__)

__version__ = "%s version %s\n" % (__prog__, __version__)

def create_help():
  global __help__
  available_commands = ''
  for command in xbmc_command.__all__:
    available_commands += '  %-17s %s\n'
    cmd = find_command_class(command)(None)
    available_commands = available_commands % (command, cmd.short_description)

  __help__ = __help__ % available_commands

def main(host, port, timeout, command, args):
  orig_command = command
  command = find_command_class(command)

  if not command:
    sys.exit("invalid <command> value: '%s'" % orig_command)

  xbmc = xbmc_command.core.XBMC(host, port)

  cmd = command(xbmc)
  args = cmd.parse_args(args)

  xbmc.settimeout(timeout)

  try:
    xbmc.connect()
  except socket.timeout:
    sys.exit("Unable to connect to host %s:%s" % (host, port))

  try:
    cmd.call(args)
  except xbmc_command.core.CommandException as e:
    sys.exit(e.msg)
  finally:
    xbmc.close()

def parse_args():
  host = port = command = timeout = None
  arg_len = len(sys.argv)
  key = 1
  while key < arg_len:
    if sys.argv[key] == '--help':
      create_help()
      sys.stdout.write(__help__)
      sys.exit()
    elif sys.argv[key] == '--version':
      sys.stdout.write(__version__)
      sys.exit()
    elif sys.argv[key] == '--timeout':
      key += 1
      timeout = sys.argv[key]
    elif sys.argv[key] == '--host':
      key += 1
      host = sys.argv[key]
    elif sys.argv[key] == '--port':
      key += 1
      port = sys.argv[key]
    elif not command:
      command = sys.argv[key]
      key += 1
      break

    key += 1

  args = sys.argv[key:]
  return (host, port, timeout, command, args)

def find_command_class(command):
  if not command in xbmc_command.__all__:
    return None

  command = command.lower().replace('-', '_')

  try:
    module = importlib.import_module('xbmc_command.%s' % command)
  except ImportError as e:
    return None

  try:
    return module.Command
  except AttributeError:
    return None

def exit_help():
  create_help()
  sys.stdout.write(__help__)
  sys.exit(1)

if __name__ == '__main__':
  try:
    host, port, timeout, command, args = parse_args()
  except IndexError:
    exit_help()

  if not command:
    exit_help()

  configp = configparser.SafeConfigParser()
  configp.read(os.path.expanduser("~/.config/xbmc-command.cfg"))

  if configp.has_section('XBMC'):
    if not host and configp.has_option('XBMC', 'host'):
      host = configp.get('XBMC', 'host')
    if not port and configp.has_option('XBMC', 'port'):
      port = configp.get('XBMC', 'port')
    if not timeout and configp.has_option('XBMC', 'timeout'):
      timeout = configp.get('XBMC', 'timeout')

  if not host or not port:
    exit_help()

  if not timeout:
    timeout = 5

  try:
    port = int(port)
    if port < 0 or port > 65535:
      sys.exit("invalid int value: '<port>': '%s'" % port)
  except ValueError:
    sys.exit("invalid int value: '<port>': '%s'" % port)

  try:
    timeout = int(timeout)
    if timeout < 0:
      sys.exit("invalid int value: '--timeout'")
  except ValueError:
    sys.exit("invalid int value: '--timeout'")

  try:
    main(host, port, timeout, command, args)
  except KeyboardInterrupt:
    sys.stdout.write('\n')
    pass

# vim: ft=python ts=2 sts=2 sw=2 et:
